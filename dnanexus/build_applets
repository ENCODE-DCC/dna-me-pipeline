#!/bin/bash

# NOTE: A virtual applet is almost identical to an existing applet.  However we need a separate name/version for 
#       ENCODEd analysis-step accounting to work.  To acheave this, the virtual app as a real dxapp.json definitition
#       but all other applet contents are temporary symlinks to the true applets's contents.  This script handles the symlinks.

applet_dest=`cat ~/.dnanexus_config/DX_PROJECT_CONTEXT_NAME`
applets="dme-index-bismark dme-index-bismark-bowtie2 dme-align-pe dme-align-se"
applets="${applets} dme-extract-se dme-extract-pe dme-cx-to-bed dme-bg-to-signal dme-rep-corr"

tools="tool_versions.py qc_metrics.py parse_property.py"
virtual_pairs="dme-cx-to-bed:dme-cx-to-bed-alt dme-bg-to-signal:dme-bg-to-signal-alt dme-rep-corr:dme-rep-corr-alt"
#virtual_links="src resources Readme.developer.md Readme.md"
virtual_links="src resources"

if [ $# -gt 0 ]; then
    if [ $1 == "?" ] || [ $1 == "-h" ] || [ $1 == "--help" ]; then
        echo "Usage: $0 [.|{project}] [{app}] [{app}]... [--test]"
        echo "    Build applets in dx project"
        echo "       project: Name of project to build in ('.' for default). Default: $applet_dest"
        echo "       app:     One or more apps to build. Default: $applets"
        echo "       --test   Must be last paramater. Say what would be done."
        exit 1
    fi
fi

# Generate the default list of virtual_apps from the virtual_pairs
virtual_applets=""
for pair in $virtual_pairs; do
    virtual=$(echo $pair | cut -f2 -d:)
    virtual_applets="$virtual_applets $virtual"
done

# Parse args
testing="nope"
# Only the first arg can be project
if [ $# -gt 0 ] && [ ! -d $1 ] && [ ! -d "virtual/$1" ]; then 
    if [ "$1" == "--test" ]; then
        testing=$1
    else
        applet_dest=$1
    fi
    shift
fi
if [ $# -gt 0 ]; then
    applets=''
    virtual_applets=''
    while (( "$#" )); do
        if [ "$1" == '--test' ]; then
            testing=$1
        else            
            applet=${1%/}
            if [ -d $applet ]; then
                applets="$applets $applet"
                for pair in $virtual_pairs; do
                    original=$(echo $pair | cut -f1 -d:)
                    if [ "$applet" == "$original" ]; then
                        virtual=$(echo $pair | cut -f2 -d:)
                        virtual_applets="$virtual_applets $virtual"
                    fi
                done
            elif [ -d "virtual/$applet" ]; then
                virtual_applets="$virtual_applets $applet"
            else
                echo "Can't find '$applet'."
                exit 0
            fi
        fi
        shift
    done
fi

# Test project
project=$(dx find projects --name "$applet_dest")
if [ -z "$project" ]
  then
    #dx new project "$applet_dest" --brief
    echo "Unknown project: $applet_dest"
    exit 1
fi

# Say what is going down
echo "Project: $applet_dest"
if [ "$applets" != "" ]; then
    echo "Apps:   $applets"
fi
if [ "$virtual_applets" != "" ]; then
    echo "Virtual:$virtual_applets"
fi
if [ "$testing" == "--test" ]; then
    echo "Testing only."
    exit 0
fi

# Applets first
if [ "$applets" != "" ]; then
    for applet in $applets; do
        echo "Building $applet in project $applet_dest..."
        mkdir -p ${applet}/resources/usr/bin 
        for tool in $tools; do
            cp tools/$tool ${applet}/resources/usr/bin
        done
        dx build "${applet}" --archive --destination "${applet_dest}:/"
        for tool in $tools; do
            rm ${applet}/resources/usr/bin/$tool 
        done
    done
fi
# virtual applets now
if [ "$virtual_applets" != "" ]; then
    for applet in $virtual_applets; do
        echo "Building virtual $applet in project $applet_dest..."
        cd virtual
        # If we know what this applet is a virtual copy of, we could fill in everything except dxapp.json
        for pair in $virtual_pairs; do
            virtual=$(echo $pair | cut -f2 -d:)
            if [ "$applet" == "$virtual" ]; then
                original=$(echo $pair | cut -f1 -d:)
                #echo "'$applet' is virtual of '$original'"
                cd $applet
                for link in $virtual_links; do
                    ln -sf ../../${original}/$link $link
                done
                cd ..
                break
            fi
        done
        for tool in $tools; do
            cp ../tools/$tool ${applet}/resources/usr/bin
        done
        dx build "${applet}" --archive --destination "${applet_dest}:/"
        for tool in $tools; do
            rm -f ${applet}/resources/usr/bin/$tool 
        done
        for link in $virtual_links; do
            rm -f ${applet}/$link
        done
        cd ..
    done
fi


#! /bin/bash

# Copyright 2014 Junko Tsuji

# This shell script is the pipeline for DNA methylation
# detection using 'bismark' as the engine.

# If you don't want to remove coverage report and some
# other reports generated by Bismark, please comment out
# the last section.

####  PARAM START  ####

# set software and in-house script path
source software.path
script="script"
prog=`basename $0`
verbose="TRUE"
index=""
output=""
genome=""
rawreads=""

# usage function
function usage {
echo -en "\e[1;35m"
cat <<EOF

Usage: $0 [options] -i reads.fq -g reference.fa -o outputDir

    -i   Single-read fastq input file
    -g   Reference genome sequences
    -o   Output directory

Options:
    [Option to skip generating an index]
    -d   Genome index

    [Cosmetic options]
    -h   Show this message
    -q   Don't print what $prog is doing

EOF
echo -en "\e[0m"
}

function message {
    if [[ $verbose = "TRUE" ]]; then
        echo "$prog: "$1
    fi
}

####  PARAM END  ####

#### SCRIPT START ####
if [[ $# -eq 0 ]]; then
  usage && exit 1;
fi

while getopts "hqi:g:d:o:" OPT
do
  case $OPT in
    "q") verbose="FALSE" ;;
    "i") rawreads=$OPTARG;;
    "g") genome=$OPTARG  ;;
    "d") index=$OPTARG   ;;
    "o") output=$OPTARG  ;;
    "h") usage && exit 1 ;;
     * ) usage && exit 1 ;;
  esac
done

# check files
if [[ $output = "" ]]; then
    echo "$prog: input output directory"
    exit 1;
fi
if [[ $rawreads = "" ]]; then
    echo "$prog: input read fastq"
    exit 1;
elif [ ! -f $rawreads ]; then
    echo "$prog: can't read $rawreads"
    exit 1;
fi
if [[ $genome = "" ]]; then
    echo "$prog: input reference genome"
    exit 1;
elif [ ! -f $genome ]; then
    echo "$prog: can't read $genome"
    exit 1;
fi


# make output directory
mkdir $output
log=$output"/run.log"

if [[ $index = "" ]]; then
    message "generating index"
    index=$output/`basename $genome`
    mkdir $index && cp $genome $index
    $bismark/bismark_genome_preparation --path_to_bowtie $bowtie $index &>> $log
fi
if [ ! -r $index ]; then
    echo "$prog: can't read $index"
    exit 1;
fi

trimmed=$output/`basename $rawreads`.trimmed
message "trimming reads"
python $script/mott-trim.py -q 3 -m 30 -t sanger $rawreads > $trimmed

message "run bismark"
$bismark/bismark -n 1 -l 28 -output_dir $output --temp_dir $output $index $trimmed &>> $log

outfull=`readlink -f $output`
message "call methylated cytosines"
$bismark/bismark_methylation_extractor -s --comprehensive --cytosine_report --CX_context \
      --output $outfull --zero_based --genome_folder $index $trimmed"_bismark.sam" &>> $log

prefix=`basename $rawreads`
trimmed=`basename $trimmed`
message "clean up ..."
python $script/cxrepo-bed.py -o $outfull $outfull/$trimmed"_bismark.CX_report.txt"

# If you want to leave all outputs of Bismark, please comment out all lines below
mv $output/"CG_"$trimmed"_bismark.CX_report.txt" $output/"CG_"$prefix".bed"
mv $output/"CHG_"$trimmed"_bismark.CX_report.txt" $output/"CHG_"$prefix".bed"
mv $output/"CHH_"$trimmed"_bismark.CX_report.txt" $output/"CHH_"$prefix".bed"
mv $output/$trimmed"_bismark.sam" $output/$prefix".sam"
mv $output/$trimmed"_bismark_SE_report.txt" $output/$prefix"_SE.report"
mv $output/$trimmed"_bismark.M-bias.txt" $output/$prefix"_M.bias"
rm $output/*CX_report.txt $output/*.bedGraph $output/*.cov $output/*_bismark.txt
